a = set{'alex', 'paria'}
a = set('alex', 'paria')
a = {'alex', 'paria'}
a = c('1', )
a = c('1', '2')
b = c('2', '1')
a == b
intersect(a, b)
unique(a, b)
a
b
intersect(a, b)
b = c('1', '2', '3')
intersect(a, b)
a = c('mito', 'mito', 'nuc', 'nuc', 'ves', 'mito')
a
unique(a)
nuc = c('chromosome', 'nucleolus', 'nucleus')
growth = c('cellular bud', 'site of polarized growth')
membrane = c('cell cortex', 'membrane')
er_golgi = c('endomembrane system', 'Golgi apparatus')
cytoskeleton = c('cytoskeleton', 'microtubule organizing center')
ves_pero = c('cytoplasmic vesicle', 'peroxisome')
mito = c('mitochondrial envelope', 'mitochondrion')
other = c('other', 'cellular_component', 'cytoplasm', 'extracellular region',
'ribosome')
a
'nuc' %in% a
fun_enrich_comps = function(fun_enrich_col) {
comps = c()
for (comp in fun_enrich_col) {
if (comp %in% nuc) {comps = append(comps, 'nuclear')}
else if (comp %in% growth) {comps = append(comps, 'growth')}
else if (comp %in% membrane) {comps = append(comps, 'membrane')}
else if (comp %in% er_golgi) {comps = append(comps, 'ER/Golgi')}
else if (comp %in% cytoskeleton) {comps = append(comps, 'cytoskeleton')}
else if (comp %in% ves_pero) {comps = append(comps, 'vesicle/peroxisome')}
else if (comp %in% mito) {comps = append(comps, 'mitochondria')}
else if (comp %in% other) {comps = append(comps, 'other')}
}
return(unique(comps))
}
library(stringr)
library(naturalsort)
library(readxl)
library(dplyr)
library(openxlsx)
library(ggplot2)
library(tidyverse)
setwd('C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/to_be_plotted/per_marker_outputs')
dir = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/to_be_plotted/per_marker_outputs'
splitAS = c('wAS', 'woAS')
compartments = c("cell cortex", "cellular bud", "cellular_component", "chromosome",
"cytoplasm", "cytoplasmic vesicle", "cytoskeleton",
"endomembrane system", "extracellular region", "Golgi apparatus",
"membrane", "microtubule organizing center",
"mitochondrial envelope", "mitochondrion", "nucleolus", "nucleus", "other",
"peroxisome", "ribosome", "site of polarized growth")
f_identifier = function(marker, file_name) {
s = stringr::str_split(file_name, "-")[[1]][1]
nc_num = stringr::str_split(stringr::str_split(s, "of")[[1]][1], "normal")[[1]][2]
nc_num = paste("Normal ", nc_num, "/", stringr::str_split(s, "of")[[1]][2], sep = "")
id = paste(marker, ": ", nc_num, sep = "")
return(id)
}
fun_enrich_values = function(comps, fun_enrich_df) {
values = c()
i = 1
for (c in comps) {
if (c %in% fun_enrich_df[, 1]) {
values = append(values, as.numeric(fun_enrich_df[i, 2]))
i = i + 1
} else {
values = append(values, NA)
}
}
return(values)
}
fun_enrich_table = function(directory, AS) {
comp_df = data.frame()
marker_dir = paste(directory, "/", AS, sep = "")
markers = list.files(marker_dir)
for (marker in markers) {
file_dir = paste(marker_dir, "/", marker, sep = "")
all_files = naturalsort::naturalsort(list.files(file_dir))
c_files = c()
for (f in all_files) {
if (stringr::str_split(f, "-")[[1]][2] == "go_slim_c.xlsx") {
c_files = append(c_files, f)
}
}
for (f in c_files) {
f_path = paste(file_dir, "/", f, sep = "")
f_df = readxl::read_excel(path = f_path)
f_df = f_df[order(f_df$'Ontology'), ]
f_df = dplyr::filter(f_df, f_df$'P-value' < 0.01)
if (nrow(f_df) == 0) {
next
}
file_id = f_identifier(marker, f)
f_df_fun_enrich = data.frame(f_df$'Ontology', f_df$'Fold enrichment')
colnames(f_df_fun_enrich) = c('Ontology', 'Fold Enrichment')
fun_enrich_row = c(file_id, fun_enrich_values(compartments, f_df_fun_enrich))
comp_df = rbind(comp_df, fun_enrich_row)
}
}
columns = c("Cluster", compartments)
colnames(comp_df) = columns
return(comp_df)
}
fun_enrich_plots = function(fe_table, AS, plots_path) {
fe_table_noclusters = fe_table[ , 2:ncol(fe_table)]
terms = colnames(fe_table_noclusters)
for (i in 1:ncol(fe_table_noclusters)) {
term = terms[i]
term_df = data.frame(fe_table[, 1], fe_table_noclusters[, i])
colnames(term_df) = c('Cluster', term)
term_df = term_df[order(-as.numeric(term_df[,2]), na.last = NA), ]
term_df[ , 2] = as.numeric(term_df[ , 2])
if (nrow(term_df) == 0) {next}
if (nrow(term_df) > 20) {term_df = term_df[1:20, ]}
plot_file = paste(term, "_", AS, ".png", sep = "")
plot_path = paste(plots_path, "/", plot_file, sep = "")
plot_subtitle = ''
if (AS == 'wAS') {plot_subtitle = 'With AreaShape'}
if (AS == 'woAS') {plot_subtitle = 'Without AreaShape'}
png(file = plot_path, width = 948, height = 874)
print(ggplot(term_df, aes(x = term_df[ , 2], y = fct_rev(fct_inorder(term_df[ , 1])))) +
geom_bar(stat='identity', fill='#FFB516', width = 0.5) +
labs(x='Functional Enrichment', y='Marker: Cluster', title=term,
subtitle=plot_subtitle) +
theme(axis.text = element_text(size=10),
axis.title = element_text(face="bold", size=13),
plot.title = element_text(face="bold", hjust = 0.5, size=15),
plot.subtitle = element_text(hjust = 0.5)))
dev.off()
}
}
fun_enrich_comps = function(fun_enrich_col) {
comps = c()
for (comp in fun_enrich_col) {
if (comp %in% nuc) {comps = append(comps, 'nuclear')}
else if (comp %in% growth) {comps = append(comps, 'growth')}
else if (comp %in% membrane) {comps = append(comps, 'membrane')}
else if (comp %in% er_golgi) {comps = append(comps, 'ER/Golgi')}
else if (comp %in% cytoskeleton) {comps = append(comps, 'cytoskeleton')}
else if (comp %in% ves_pero) {comps = append(comps, 'vesicle/peroxisome')}
else if (comp %in% mito) {comps = append(comps, 'mitochondria')}
else if (comp %in% other) {comps = append(comps, 'other')}
}
return(unique(comps))
}
wAS = fun_enrich_table(dir, "with_AreaShape")
woAS = fun_enrich_table(dir, "without_AreaShape")
View(wAS)
AS = 'with_AreaShape'
files_path = paste(directory, "/", AS, sep = "")
setwd('C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/to_be_plotted')
directory = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/to_be_plotted/per_marker_outputs'
compartments = c("cell cortex", "cellular bud", "cellular_component", "chromosome",
"cytoplasm", "cytoplasmic vesicle", "cytoskeleton",
"endomembrane system", "extracellular region", "Golgi apparatus",
"membrane", "microtubule organizing center",
"mitochondrial envelope", "mitochondrion", "nucleolus", "nucleus", "other",
"peroxisome", "ribosome", "site of polarized growth")
nuc = c('chromosome', 'nucleolus', 'nucleus')
growth = c('cellular bud', 'site of polarized growth')
membrane = c('cell cortex', 'membrane')
er_golgi = c('endomembrane system', 'Golgi apparatus')
cytoskeleton = c('cytoskeleton', 'microtubule organizing center')
ves_pero = c('cytoplasmic vesicle', 'peroxisome')
mito = c('mitochondrial envelope', 'mitochondrion')
other = c('other', 'cellular_component', 'cytoplasm', 'extracellular region',
'ribosome')
fun_enrich_comps = function(fun_enrich_col) {
comps = c()
for (comp in fun_enrich_col) {
if (comp %in% nuc) {comps = append(comps, 'nuclear')}
else if (comp %in% growth) {comps = append(comps, 'growth')}
else if (comp %in% membrane) {comps = append(comps, 'membrane')}
else if (comp %in% er_golgi) {comps = append(comps, 'ER/Golgi')}
else if (comp %in% cytoskeleton) {comps = append(comps, 'cytoskeleton')}
else if (comp %in% ves_pero) {comps = append(comps, 'vesicle/peroxisome')}
else if (comp %in% mito) {comps = append(comps, 'mitochondria')}
else if (comp %in% other) {comps = append(comps, 'other')}
}
return(unique(comps))
}
split_AS = c('with_AreaShape', 'without_AreaShape')
files_path = paste(directory, "/", AS, sep = "")
files_path
markers = list.files(files_path)
markers
marker = "Cdc11"
marker_directory = paste(files_path, "/", marker, sep = "")
marker_directory
files = list.files(marker_directory)
files
f = "normal0of12-go_slim_c.xlsx"
sheet_path = paste(marker_directory, "/", f, sep = "")
sheet_path
sheet_df = readxl::read_excel(path = sheet_path)
sheet_df = dplyr::filter(sheet_df, sheet_df$'P-value' < 0.01)
View(sheet_df)
clean_file_name = function(file_name) {
break_up = stringr::str_split(file_name, "-")[[1]]
transformed = c()
for (s in break_up) {
if (startsWith(s, "normal")) {
nc_num = stringr::str_split(stringr::str_split(s, "of")[[1]][1], "normal")[[1]][2]
nc_num = paste("Normal", nc_num, "of", stringr::str_split(s, "of")[[1]][2])
transformed = c(transformed, nc_num)
}
if (s == "go_slim_p.xlsx") {
transformed = c(transformed, "Biological Process")
}
if (s == "go_slim_c.xlsx") {
transformed = c(transformed, "Cellular Compartment")
}
}
return(transformed)
}
cluster_num = clean_file_name(f)
cluster_num
clean_file_name = function(file_name) {
break_up = stringr::str_split(file_name, "-")[[1]]
transformed = c()
for (s in break_up) {
if (startsWith(s, "normal")) {
nc_num = stringr::str_split(stringr::str_split(s, "of")[[1]][1], "normal")[[1]][2]
nc_num = paste("Normal", nc_num)
transformed = c(transformed, nc_num)
}
if (s == "go_slim_p.xlsx") {
transformed = c(transformed, "Biological Process")
}
if (s == "go_slim_c.xlsx") {
transformed = c(transformed, "Cellular Compartment")
}
}
return(transformed)
}
cluster_num = clean_file_name(f)
cluster_num
cluster_num = clean_file_name(f)[1]
cluster_num
clean_file_name = function(marker, file_name) {
break_up = stringr::str_split(file_name, "-")[[1]]
transformed = c()
for (s in break_up) {
if (startsWith(s, "normal")) {
nc_num = stringr::str_split(stringr::str_split(s, "of")[[1]][1], "normal")[[1]][2]
nc_num = paste(marker, "Normal", nc_num)
transformed = c(transformed, nc_num)
}
if (s == "go_slim_p.xlsx") {
transformed = c(transformed, "Biological Process")
}
if (s == "go_slim_c.xlsx") {
transformed = c(transformed, "Cellular Compartment")
}
}
return(transformed)
}
cluster_num = clean_file_name(marker, f)[1]
cluster_num
comps = fun_enrich_comps(sheet_df$Ontology)
comps
fun_enrich_comps = function(fun_enrich_col) {
comps = c()
for (comp in fun_enrich_col) {
if (comp %in% nuc) {comps = append(comps, 'nuclear')}
else if (comp %in% growth) {comps = append(comps, 'growth')}
else if (comp %in% membrane) {comps = append(comps, 'membrane')}
else if (comp %in% er_golgi) {comps = append(comps, 'ER/Golgi')}
else if (comp %in% cytoskeleton) {comps = append(comps, 'cytoskeleton')}
else if (comp %in% ves_pero) {comps = append(comps, 'vesicle/peroxisome')}
else if (comp %in% mito) {comps = append(comps, 'mitochondria')}
else if (comp %in% other) {comps = append(comps, 'other')}
}
comps = unique(comps)
comps = paste(comps)
return(comps)
}
comps = fun_enrich_comps(sheet_df$Ontology)
comps
fun_enrich_comps = function(fun_enrich_col) {
comps = c()
for (comp in fun_enrich_col) {
if (comp %in% nuc) {comps = append(comps, 'nuclear')}
else if (comp %in% growth) {comps = append(comps, 'growth')}
else if (comp %in% membrane) {comps = append(comps, 'membrane')}
else if (comp %in% er_golgi) {comps = append(comps, 'ER/Golgi')}
else if (comp %in% cytoskeleton) {comps = append(comps, 'cytoskeleton')}
else if (comp %in% ves_pero) {comps = append(comps, 'vesicle/peroxisome')}
else if (comp %in% mito) {comps = append(comps, 'mitochondria')}
else if (comp %in% other) {comps = append(comps, 'other')}
}
comps = unique(comps)
comps = paste(comps)
return(comps)
}
a = c('paria', 'alex')
a
paste(a)
a = paste(a)
a
a[1]
a = paste(a, collapse = TRUE)
?paste
a = paste(a, collapse = ', ')
a
fun_enrich_comps = function(fun_enrich_col) {
comps = c()
for (comp in fun_enrich_col) {
if (comp %in% nuc) {comps = append(comps, 'nuclear')}
else if (comp %in% growth) {comps = append(comps, 'growth')}
else if (comp %in% membrane) {comps = append(comps, 'membrane')}
else if (comp %in% er_golgi) {comps = append(comps, 'ER/Golgi')}
else if (comp %in% cytoskeleton) {comps = append(comps, 'cytoskeleton')}
else if (comp %in% ves_pero) {comps = append(comps, 'vesicle/peroxisome')}
else if (comp %in% mito) {comps = append(comps, 'mitochondria')}
else if (comp %in% other) {comps = append(comps, 'other')}
}
comps = unique(comps)
comps = paste(comps, collapse = ', ')
return(comps)
}
comps = fun_enrich_comps(sheet_df$Ontology)
comps
comps_df = data.frame(c('Cluster', 'Terms'))
View(comps_df)
cluster_comps = c(cluster_num, comps)
cluster_comps
rbind(comps_df) = cluster_comps
rbind(comps_df, cluster_comps
)
View(comps_df)
comps_df = rbind(comps_df, cluster_comps
)
View(comps_df)
cluster_comps
comps_df = data.frame(c('Cluster', 'x'), c('Terms', 'y'))
View(comps_df)
comps_df = data.frame(c('Cluster'), c('Terms'))
View(comps_df)
comps_df = rbind(comps_df, cluster_comps)
View(comps_df)
comps_df = data.frame(c('Cluster'), c('Terms'))
for (AS in split_AS) {
files_path = paste(directory, "/", AS, sep = "")
markers = list.files(files_path)
for (marker in markers) {
marker_directory = paste(files_path, "/", marker, sep = "")
files = list.files(marker_directory)
for (f in files) {
sheet_path = paste(marker_directory, "/", f, sep = "")
sheet_df = readxl::read_excel(path = sheet_path)
sheet_df = dplyr::filter(sheet_df, sheet_df$'P-value' < 0.01)
if (nrow(sheet_df) == 0) {
next
}
cluster_num = clean_file_name(marker, f)[1]
comps = fun_enrich_comps(sheet_df$Ontology)
cluster_comps = c(cluster_num, comps)
comps_df = rbind(comps_df, cluster_comps)
}
}
}
View(comps_df)
library(naturalsort)
comps_df = data.frame(c('Cluster'), c('Terms'))
for (AS in split_AS) {
files_path = paste(directory, "/", AS, sep = "")
markers = naturalsort::naturalsort(list.files(files_path))
for (marker in markers) {
marker_directory = paste(files_path, "/", marker, sep = "")
files = list.files(marker_directory)
for (f in files) {
sheet_path = paste(marker_directory, "/", f, sep = "")
sheet_df = readxl::read_excel(path = sheet_path)
sheet_df = dplyr::filter(sheet_df, sheet_df$'P-value' < 0.01)
if (nrow(sheet_df) == 0) {
next
}
cluster_num = clean_file_name(marker, f)[1]
comps = fun_enrich_comps(sheet_df$Ontology)
cluster_comps = c(cluster_num, comps)
comps_df = rbind(comps_df, cluster_comps)
}
}
}
View(comps_df)
comps_df = data.frame(c('Cluster'), c('Terms'))
for (AS in split_AS) {
files_path = paste(directory, "/", AS, sep = "")
markers = list.files(files_path)
for (marker in markers) {
marker_directory = paste(files_path, "/", marker, sep = "")
files = naturalsort::naturalsort(list.files(marker_directory))
for (f in files) {
sheet_path = paste(marker_directory, "/", f, sep = "")
sheet_df = readxl::read_excel(path = sheet_path)
sheet_df = dplyr::filter(sheet_df, sheet_df$'P-value' < 0.01)
if (nrow(sheet_df) == 0) {
next
}
cluster_num = clean_file_name(marker, f)[1]
comps = fun_enrich_comps(sheet_df$Ontology)
cluster_comps = c(cluster_num, comps)
comps_df = rbind(comps_df, cluster_comps)
}
}
}
View(comps_df)
comps_df = data.frame(c('Cluster'), c('Terms'))
for (AS in split_AS) {
files_path = paste(directory, "/", AS, sep = "")
markers = list.files(files_path)
for (marker in markers) {
marker_directory = paste(files_path, "/", marker, sep = "")
files = naturalsort::naturalsort(list.files(marker_directory))
for (f in files) {
sheet_path = paste(marker_directory, "/", f, sep = "")
sheet_df = readxl::read_excel(path = sheet_path)
sheet_df = dplyr::filter(sheet_df, sheet_df$'P-value' < 0.01)
if (nrow(sheet_df) == 0) {
next
}
cluster_num = clean_file_name(marker, f)[1]
comps = fun_enrich_comps(sheet_df$Ontology)
cluster_comps = c(cluster_num, comps)
rbind(comps_df, cluster_comps)
}
}
}
library(naturalsort)
library(dplyr)
library(readxl)
comps_df = data.frame(c('Cluster'), c('Terms'))
for (AS in split_AS) {
files_path = paste(directory, "/", AS, sep = "")
markers = list.files(files_path)
for (marker in markers) {
marker_directory = paste(files_path, "/", marker, sep = "")
files = naturalsort::naturalsort(list.files(marker_directory))
for (f in files) {
sheet_path = paste(marker_directory, "/", f, sep = "")
sheet_df = readxl::read_excel(path = sheet_path)
sheet_df = dplyr::filter(sheet_df, sheet_df$'P-value' < 0.01)
#if (nrow(sheet_df) == 0) {next}
cluster_num = clean_file_name(marker, f)[1]
comps = fun_enrich_comps(sheet_df$Ontology)
cluster_comps = c(cluster_num, comps)
comps_df = rbind(comps_df, cluster_comps)
}
}
}
View(comps_df)
cluster_comps
comps
sheet_df$Ontology
files
View(comps_df)
c_files = c()
for (f in files) {
if (stringr::str_split(f, "-")[[1]][2] == "go_slim_c.xlsx") {
c_files = append(c_files, f)
}
}
c_files
comps_df = data.frame(c('Cluster'), c('Terms'))
for (AS in split_AS) {
files_path = paste(directory, "/", AS, sep = "")
markers = list.files(files_path)
for (marker in markers) {
marker_directory = paste(files_path, "/", marker, sep = "")
files = naturalsort::naturalsort(list.files(marker_directory))
c_files = c()
for (f in files) {
if (stringr::str_split(f, "-")[[1]][2] == "go_slim_c.xlsx") {
c_files = append(c_files, f)
}
}
for (f in c_files) {
sheet_path = paste(marker_directory, "/", f, sep = "")
sheet_df = readxl::read_excel(path = sheet_path)
sheet_df = dplyr::filter(sheet_df, sheet_df$'P-value' < 0.01)
if (nrow(sheet_df) == 0) {next}
cluster_num = clean_file_name(marker, f)[1]
comps = fun_enrich_comps(sheet_df$Ontology)
cluster_comps = c(cluster_num, comps)
comps_df = rbind(comps_df, cluster_comps)
}
}
}
View(comps_df)
sheet_names = list('Sheet1' = comps_df)
write.xlsx(sheet_names, file = 'fun_enrich_comps.xlsx')
